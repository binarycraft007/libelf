const std = @import("std");

pub fn build(b: *std.Build) void {
    const target = b.standardTargetOptions(.{});
    const optimize = b.standardOptimizeOption(.{});
    const t = target.result;
    const config_h = b.addConfigHeader(.{
        .style = .{
            .autoconf = .{ .path = "include/config.h.in" },
        },
        .include_path = "config.h",
    }, .{
        .CHECK_UNDEFINED = false,
        .DEFAULT_AR_DETERMINISTIC = true,
        .DUMMY_LIBDEBUGINFOD = null,
        .ENABLE_DEBUGINFOD = false,
        .ENABLE_LIBDEBUGINFOD = false,
        .ENABLE_NLS = true,
        .HAVE_CFLOCALECOPYPREFERREDLANGUAGES = null,
        .HAVE_CFPREFERENCESCOPYAPPVALUE = null,
        .HAVE_CXX11 = true,
        .HAVE_DCGETTEXT = true,
        .HAVE_DECL_MEMPCPY = true,
        .HAVE_DECL_MEMRCHR = true,
        .HAVE_DECL_POWEROF2 = true,
        .HAVE_DECL_RAWMEMCHR = t.isGnu(),
        .HAVE_DECL_REALLOCARRAY = true,
        .HAVE_DECL_STRERROR_R = true,
        .HAVE_ERROR_H = null,
        .HAVE_ERR_H = true,
        .HAVE_EXECINFO_H = true,
        .HAVE_FALLTHROUGH = true,
        .HAVE_GCC_STRUCT = true,
        .HAVE_GETRLIMIT = true,
        .HAVE_GETTEXT = true,
        .HAVE_ICONV = true,
        .HAVE_INTTYPES_H = true,
        .HAVE_MREMAP = true,
        .HAVE_PROCESS_VM_READV = true,
        .HAVE_PTHREAD_SETNAME_NP = true,
        .HAVE_SCHED_GETAFFINITY = true,
        .HAVE_SCHED_H = true,
        .HAVE_STDATOMIC_H = true,
        .HAVE_STDINT_H = true,
        .HAVE_STDIO_H = true,
        .HAVE_STDLIB_H = true,
        .HAVE_STRERROR_R = true,
        .HAVE_STRINGS_H = true,
        .HAVE_STRING_H = true,
        .HAVE_SYS_RESOURCE_H = true,
        .HAVE_SYS_STAT_H = true,
        .HAVE_SYS_TYPES_H = true,
        .HAVE_SYS_USER_REGS = true,
        .HAVE_UNISTD_H = true,
        .HAVE_VISIBILITY = true,
        .PACKAGE = "elfutils",
        .PACKAGE_BUGREPORT = "https://sourceware.org/bugzilla",
        .PACKAGE_NAME = "libelf",
        .PACKAGE_STRING = "libelf 0.189",
        .PACKAGE_TARNAME = "libelf",
        .PACKAGE_URL = "http://elfutils.org/",
        .PACKAGE_VERSION = "0.189",
        .SIZEOF_LONG = t.c_type_byte_size(.long),
        .STDC_HEADERS = true,
        .STRERROR_R_CHAR_P = true,
        .USE_BZLIB = false,
        .USE_DEMANGLE = false,
        .USE_LOCKS = null,
        .USE_LZMA = false,
        .USE_ZLIB = false,
        .USE_ZSTD = false,
        .USE_ZSTD_COMPRESS = false,
        .VERSION = "0.189",
        .YYTEXT_POINTER = true,
        ._FILE_OFFSET_BITS = null,
        ._LARGE_FILES = null,
    });
    const lib = b.addStaticLibrary(.{
        .name = "elf",
        .target = target,
        .optimize = optimize,
    });
    lib.defineCMacro("_GNU_SOURCE", null);
    lib.root_module.link_libc = true;
    lib.defineCMacro("HAVE_CONFIG_H", "");
    lib.addConfigHeader(config_h);
    lib.addCSourceFiles(.{
        .files = &elf_src,
        .flags = &.{},
    });
    lib.addCSourceFiles(.{
        .files = &libeu_src,
        .flags = &.{},
    });
    lib.addIncludePath(.{ .path = "lib" });
    lib.addIncludePath(.{ .path = "include" });
    lib.installHeadersDirectoryOptions(.{
        .source_dir = .{ .path = "include" },
        .install_dir = .header,
        .install_subdir = "",
        .include_extensions = &elf_headers,
    });
    lib.linkLibrary(b.dependency("zlib", .{
        .target = target,
        .optimize = optimize,
    }).artifact("z"));
    lib.installConfigHeader(config_h, .{});
    b.installArtifact(lib);

    const lib_unit_tests = b.addTest(.{
        .root_source_file = .{ .path = "src/root.zig" },
        .target = target,
        .optimize = optimize,
    });

    const run_lib_unit_tests = b.addRunArtifact(lib_unit_tests);
    const test_step = b.step("test", "Run unit tests");
    test_step.dependOn(&run_lib_unit_tests.step);
}

const elf_headers = [_][]const u8{
    "elf.h",
    "libelf.h",
    "gelf.h",
    "nlist.h",
};

const elf_src = [_][]const u8{
    "src/elf32_checksum.c",
    "src/elf32_fsize.c",
    "src/elf32_getchdr.c",
    "src/elf32_getehdr.c",
    "src/elf32_getphdr.c",
    "src/elf32_getshdr.c",
    "src/elf32_newehdr.c",
    "src/elf32_newphdr.c",
    "src/elf32_offscn.c",
    "src/elf32_updatefile.c",
    "src/elf32_updatenull.c",
    "src/elf32_xlatetof.c",
    "src/elf32_xlatetom.c",
    "src/elf64_checksum.c",
    "src/elf64_fsize.c",
    "src/elf64_getchdr.c",
    "src/elf64_getehdr.c",
    "src/elf64_getphdr.c",
    "src/elf64_getshdr.c",
    "src/elf64_newehdr.c",
    "src/elf64_newphdr.c",
    "src/elf64_offscn.c",
    "src/elf64_updatefile.c",
    "src/elf64_updatenull.c",
    "src/elf64_xlatetof.c",
    "src/elf64_xlatetom.c",
    "src/elf_begin.c",
    "src/elf_clone.c",
    "src/elf_cntl.c",
    "src/elf_end.c",
    "src/elf_error.c",
    "src/elf_fill.c",
    "src/elf_flagdata.c",
    "src/elf_flagehdr.c",
    "src/elf_flagelf.c",
    "src/elf_flagphdr.c",
    "src/elf_flagscn.c",
    "src/elf_flagshdr.c",
    "src/elf_getarhdr.c",
    "src/elf_getaroff.c",
    "src/elf_getarsym.c",
    "src/elf_getbase.c",
    "src/elf_getdata.c",
    "src/elf_getdata_rawchunk.c",
    "src/elf_getident.c",
    "src/elf_getphdrnum.c",
    "src/elf_getscn.c",
    "src/elf_getshdrnum.c",
    "src/elf_getshdrstrndx.c",
    "src/elf_gnu_hash.c",
    "src/elf_hash.c",
    "src/elf_kind.c",
    "src/elf_memory.c",
    "src/elf_ndxscn.c",
    "src/elf_newdata.c",
    "src/elf_newscn.c",
    "src/elf_next.c",
    "src/elf_nextscn.c",
    "src/elf_rand.c",
    "src/elf_rawdata.c",
    "src/elf_rawfile.c",
    "src/elf_readall.c",
    "src/elf_scnshndx.c",
    "src/elf_strptr.c",
    "src/elf_update.c",
    "src/elf_version.c",
    "src/elf_compress.c",
    "src/elf_compress_gnu.c",
    "src/gelf_checksum.c",
    "src/gelf_fsize.c",
    "src/gelf_getauxv.c",
    "src/gelf_getchdr.c",
    "src/gelf_getclass.c",
    "src/gelf_getdyn.c",
    "src/gelf_getehdr.c",
    "src/gelf_getlib.c",
    "src/gelf_getmove.c",
    "src/gelf_getnote.c",
    "src/gelf_getphdr.c",
    "src/gelf_getrela.c",
    "src/gelf_getrel.c",
    "src/gelf_getshdr.c",
    "src/gelf_getsym.c",
    "src/gelf_getsyminfo.c",
    "src/gelf_getsymshndx.c",
    "src/gelf_getverdaux.c",
    "src/gelf_getverdef.c",
    "src/gelf_getvernaux.c",
    "src/gelf_getverneed.c",
    "src/gelf_getversym.c",
    "src/gelf_newehdr.c",
    "src/gelf_newphdr.c",
    "src/gelf_offscn.c",
    "src/gelf_update_auxv.c",
    "src/gelf_update_dyn.c",
    "src/gelf_update_ehdr.c",
    "src/gelf_update_lib.c",
    "src/gelf_update_move.c",
    "src/gelf_update_phdr.c",
    "src/gelf_update_rela.c",
    "src/gelf_update_rel.c",
    "src/gelf_update_shdr.c",
    "src/gelf_update_sym.c",
    "src/gelf_update_syminfo.c",
    "src/gelf_update_symshndx.c",
    "src/gelf_update_verdaux.c",
    "src/gelf_update_verdef.c",
    "src/gelf_update_vernaux.c",
    "src/gelf_update_verneed.c",
    "src/gelf_update_versym.c",
    "src/gelf_xlate.c",
    "src/gelf_xlatetof.c",
    "src/gelf_xlatetom.c",
    "src/libelf_crc32.c",
    "src/libelf_next_prime.c",
    "src/nlist.c",
};

const libeu_src = [_][]const u8{
    "lib/xasprintf.c",
    "lib/xstrdup.c",
    "lib/xstrndup.c",
    "lib/xmalloc.c",
    "lib/next_prime.c",
    "lib/crc32.c",
    "lib/crc32_file.c",
    //"lib/color.c",
    "lib/error.c",
    //"lib/printversion.c",
    //"lib/dynamicsizehash.c",
    //"lib/dynamicsizehash_concurrent.c",
};
